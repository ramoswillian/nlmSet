install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
require(tidyverse)
library(ggplot2)
library(tibble)
library(tidyr)
install.packages(shiny)
install.packages("shiny")
install.packages("ShinyDashboard")
install.packages("shinydashboard")
library(shinydashboard)
library(shiny)
library(shinydashboard)
library(ggplot2)
data <- mlg
library(mlg)
library(mpg)
data <- mlg
data <- mpg
rm = data
rm(data)
rm(rm)
dada <- mpg
deda <- mpg
ls(list = rm)
rm(list = ls())
dgama()
dnorm()
dnorm(-1)
shiny::runApp('Documentos/Teste')
#ggplot2
library(ggplot2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
shiny::runApp('stats-games/altura')
runApp('stats-games/altura')
setwd("~/shiny")
rm(list = ls())
setwd
setwd("~/shiny")
setwd("~/Área de Trabalho/PET/nlmSet/shiny")
setwd("~/Documentos")
setwd("~/Área de Trabalho/PET/nlmSet/shiny")
library(shiny)
library(shinydashboard)
?dashboardPage
?dashboardHeader
runApp()
?dashboardHeader
runApp()
runApp('~/nlmSet/testes')
runApp()
?dashboardBod
?dashboardBody
runApp()
runApp()
?actionLink
runApp()
?box
runApp()
?mpg
ggplot(data = ??mpg,
aes(
x =
))
?mpg
?Species
runApp()
install.packages("flexdashboard")
runApp()
?as.formula
?eval
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionLink
?skin
?dashboardPage
runApp()
mycss <- "
.irs-bar,
.irs-bar-edge,
.irs-single,
.irs-grid-pol {
background: red;
border-color: red;
}"
runApp()
shiny::runApp()
runApp('~/Área de Trabalho/PET/nlmSet')
runApp('~/Área de Trabalho/PET/nlmSet')
runApp('~/Área de Trabalho/PET/nlmSet')
runApp()
runApp('~/Área de Trabalho/PET/nlmSet')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shinyUI(dashboardPage(
# Title
title = "nlmSet",
# Skin
skin = "green",
# Header
dashboardHeader(
title = "Nonlinear Regression Models Catalogue",
titleWidth = 450
),
# Sidebar
dashboardSidebar(
# Trocando cor da barra.
tags$style(mycss),
# ***********************************************************************
# Abas
teste <- <i class="fas fa-superscript"></i>
sidebarMenu(
# Primeira Aba
menuItem(
"Models", # Titulo
tabName = "mod",
icon = "teste"
# Item dentro da aba
menuSubItem(
"Exponencial Assintotica",
tabName = "expA"
)
)
),
# ***********************************************************************
actionButton(
inputId = "link",
label = "Repository"
)
), #dashboardSidebar
# Body
dashboardBody(
# Utilizar a funcao box dentro de dashboardBody(fluidRow()) para criar caixas
fluidRow(
# Box: A funcao box cria caixas no layout da pagina.
# Status argumentos: primary, success, info, warning, danger.
box(title = "Plot",
solidHeader = TRUE, # Fixa o titulo no comeco
#height = 470,
width = 7,
status = "success",
#background = "aqua",
collapsible = TRUE,
plotOutput(
outputId = "ea",
height = 400
)
),
box(title = "Slider",
solidHeader = TRUE,
#height = 470,
width = 5,
status = "success",
collapsible = TRUE,
sliderInput(inputId = "tA",
min = -10,
max = 10,
value = 1,
step = 0.5,
label = "Theta A"
),
sliderInput(inputId = "t0",
min = 0,
max = 1,
value = 0.5,
step = 0.05,
label = "Theta 0"
)
),
box(title = "Documentation",
solidHeader = TRUE,
#height = 10,
width = 7,
status = "success",
#background = "light-blue",
collapsible = TRUE
),
box(title = "R Code",   #Inserir arquivo Rmarkdown
solidHeader = TRUE,
#height = 10,
width = 5,
status = "success",
#background = "aqua",
collapsible = TRUE
)
) #fluidRow
)#dashboardBody
)#dashboardPage
)#shinyUI
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Área de Trabalho/teste/teste2")
runApp('~/git-teste/example1')
runApp('~/git-teste/example1')
runApp('~/git-teste/example1')
runApp('~/git-teste/example1')
runApp('~/Área de Trabalho/PET/nlmSet/shiny')
shiny::runApp()
library(shiny)
library(shinydashboard)
library(ggplot2)
library(markdown)
installed.packages("shiny")
install.packages("shinydashboard")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
thetaA <- input$tA
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp('~/Área de Trabalho')
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?source
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("SpatialEpiApp")
library(SpatialEpiApp)
require(SpatialEpiApp)
plot(iris)
plot(iris$Sepal.Length)
shiny::runApp()
mForm6 <- as.formula("Y ~ thetaA * (1 - exp(-theta0 *x))")
mExpr6 <- mForm6[[3]]
mExpr62 <- mForm6[[2]]
mExpr6 <- mForm6
mExpr6 <- mForm6[[3]]
thetaA <- input$tA
library(ggplot2)
ex7 <- Vectorize(function(mu){
l_mu1 <- pnorm(10, mean = mu, sd = 1, log = TRUE, lower.tail = TRUE)
l_mu2 <- pnorm(10, mean = mu, sd = 1, log = TRUE, lower.tail = FALSE)
l_mu3 <- log(diff(pnorm(c(5,10), mean = mu, sd = 1)))
l_mu4 <- dnorm(10, mean = mu, sd = 1, log = TRUE)
return(l_mu1+l_mu2+l_mu3+l_mu4)
})
ggplot(data.frame(x=c(0, 30)), aes(x)) + stat_function(fun=ex7)+theme_classic()+ggtitle("Y ~ N(mu, 1)")+
xlab("theta") + ylab("Log-Verossimilhança")# + geom_vline(xintercept = 10, color = "black", size=0.5)
ex8 <- Vectorize(function(lambda){
l_mu1 <- ppois(10, lambda = lambda, lower.tail = TRUE, log = TRUE)
l_mu2 <- ppois(10, lambda = lambda, lower.tail = FALSE, log = TRUE)
l_mu3 <- log(diff(ppois(c(5,10), lambda = lambda, lower.tail = TRUE)))
l_mu4 <- dpois(10, lambda = lambda, log = TRUE)
return(l_mu1+l_mu2+l_mu3+l_mu4)
})
ggplot(data.frame(x=c(0, 30)), aes(x)) + stat_function(fun=ex7, size = 3)+theme_classic()+ggtitle("Y ~ N(mu, 1)")+
xlab("theta") + ylab("Log-Verossimilhança")# + geom_vline(xintercept = 10, color = "black", size=0.5)
runApp()
runApp()
shiny::runApp()
runApp()
F <- function(a,b,...){a^b+b/a}
L <- list("a" = 5, "b" = 2, "c" = 0)
f.partial <- function( var = "a",params=L){
params[[var]]=as.name("x")
function(x)do.call(F,params)
}
f.partial("a")(1)
> F(1,a=L$a)
f.partial("a")(1)
f.partial("b")(1)
F(1,a=L$a)
runApp('~/Documentos/Teste')
runApp()
runApp('~/shiny-apps/random_forest_example')
install.packages("randomForest")
runApp('~/shiny-apps/random_forest_example')
runApp('~/shiny-apps/RV_distributions')
library("ggplot2")
df <- data.frame(x = seq(0,1,0.1))
ggplot(df, aes(x)) +
stat_function(fun = f.partial("a"),col='blue') +
stat_function(fun = f.partial("b"),col='red')
Fu <- function(a,b,...){a^b+b/a}
L <- list("a" = 5, "b" = 2, "c" = 0)
f.partial <- function( var = "a",params=L){
params[[var]]=as.name("x")
function(x)do.call(F,params)
}
f.partial("a")(1)
f.partial("b")(1)
F(1,a=L$a)
library("ggplot2")
df <- data.frame(x = seq(0,1,0.1))
ggplot(df, aes(x)) +
stat_function(fun = f.partial("a"),col='blue') +
stat_function(fun = f.partial("b"),col='red')
exp(1)
runApp()
runApp()
runApp()
runApp()
runApp()
mForm6 <- as.formula("Y ~ thetaA * (1 - exp(-theta0 *x))")
mExpr6
mForm6 <- as.formula("Y ~ thetaA * (1 - exp(-theta0 *x))")
mExpr6
mForm6
mExpr6 <- mForm6[3]
mExpr6
mExpr6 <- mForm6[[3]]
mExpr6
runApp()
mForm6 <- as.formula("Y ~ thetaA * (1 - exp(-theta0 *x))")
mExpr6 <- mForm6[[3]]
thetaA <- 3
theta0 <- 5
ggplot(data.frame(x=c(0, 10)), aes(x)) +
stat_function(fun=mExpr6, size = 2) +
theme_classic() +
xlab("") + ylab("")
mForm6 <- as.formula("Y ~ thetaA * (1 - exp(-theta0 * x))")
mExpr6 <- mForm6[[3]]
thetaA <- 3
theta0 <- 5
ggplot(data.frame(x=c(0, 10)), aes(x)) +
stat_function(fun=mExpr6, size = 2) +
theme_classic() +
xlab("") + ylab("")
mExpr6
mForm0 <- as.formula("x^2")
mForm0 <- as.formula("x ^ 2")
mForm0 <- as.formula("x * theta A")
mForm0 <- as.formula("x * theta A")
mForm6 <- as.formula("Y ~ thetaA * (1 - exp(-theta0 * x))")
mForm0 <- as.formula("X ~ x * theta A")
mForm0 <- as.formula("X ~ (x * theta A)")
rm(list = ls())
teste <- Vectorize(function(thetaA, thetaB, x){
result <- thetaA * (1 - exp(-thetaB * x))
return(result)
})
thetaA <- 3
theta0 <- 5
ggplot(data.frame(x=c(0, 10)), aes(x)) +
stat_function(fun=mExpr6, size = 2) +
theme_classic() +
xlab("") + ylab("")
TA <- 3
T0 <- 5
ggplot(data.frame(x=c(0, 10)), aes(x)) +
stat_function(fun=teste(thetaA = TA, thetaB = T0), size = 2) +
theme_classic() +
xlab("") + ylab("")
ggplot(data.frame(x=c(0, 10)), aes(x)) +
stat_function(fun=teste(thetaA = TA, thetaB = T0, x), size = 2) +
theme_classic() +
xlab("") + ylab("")
teste <- Vectorize(function( x){
result <- 3 * (1 - exp(-2 * x))
return(result)
})
teste <- Vectorize(function( x){
result <- 3 * (1 - exp(-2 * x))
return(result)
})
ggplot(data.frame(x=c(0, 10)), aes(x)) +
stat_function(fun=teste, size = 2) +
theme_classic() +
xlab("") + ylab("")
teste <- Vectorize(function(thetaA, thetaB){
result <- thetaA * (1 - exp(-thetaB * x))
return(result)
})
teste <- function(thetaA, thetaB){
result <- thetaA * (1 - exp(-thetaB * x))
return(result)
}
resultados <- Vectorize(function(x){
result <- thetaA * (1 - exp(-thetaB * x))
return(result)
})
ggplot(data.frame(x=c(0, 10)), aes(x)) +
stat_function(fun=resultados, size = 2) +
theme_classic() +
xlab("") + ylab("")
thetaB <- 5
resultados <- Vectorize(function(x){
result <- thetaA * (1 - exp(-thetaB * x))
return(result)
})
ggplot(data.frame(x=c(0, 10)), aes(x)) +
stat_function(fun=resultados, size = 2) +
theme_classic() +
xlab("") + ylab("")
runApp()
ggplot(data.frame(x=c(0, 10)), aes(x)) +
stat_function(fun=resultados, size = 2, colours = "red") +
theme_classic() +
xlab("") + ylab("")
ggplot(data.frame(x=c(0, 10)), aes(x)) +
stat_function(fun=resultados, size = 1.5, colour = "red") +
theme_classic() +
xlab("") + ylab("")
ggplot(data.frame(x=c(0, 10)), aes(x)) +
stat_function(fun=resultados, size = 1, colour = "red") +
theme_classic() +
xlab("") + ylab("")
ggplot(data.frame(x=c(0, 10)), aes(x)) +
stat_function(fun=resultados, size = 1, colour = "red") +
theme_classic() +
xlab("") + ylab("")
runApp()
shiny::runApp('~/nlmset')
setwd("~/nlmSet")
setwd("~/nlmSet")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
set.seed(123)
dados <- rpois(n = 100, lambda = 10)
mean(dados)
sd <- sum(dados)/sqrt(length(dados))
sd <- sqrt(mean(dados)/length(dados))
mean(dados)
sd <- sqrt(mean(dados)/length(dados))
emv <- mean(dados)
teste <- (emv - 8)/sd
teste < 1.96
qnorm(0.95)
teste < qnorm(0.975)
qnorm(0.975)
teste < qnorm(0.975)
runApp('~/Área de Trabalho/Graduação/Inferência/Computacional/Shiny')
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(flexdashboard)
library(shiny)
library(shinydashboard)
library(markdown)
library(knitr)
## Model 1
mForm1 <- as.formula("Y ~ (thetaA_1 * x)/(thetaV_1  + x)")
mForm1 <- as.formula("Y ~ (thetaA_1 * x)/(thetaV_1  + x)")
mForm1
## Model 2
mForm2 <- as.formula("Y ~ (thetaA_2 * x)/((vthetaQ_2 * ((1 - q_2)/q_2)) + x)")
mForm2
# Model 3
mForm3 <- as.formula("Y ~ thetaA_3/(1 + ((vthetaQ_3/x) * ((1 - q_3)/q_3)) ^ thetaC_3)")
mForm3
# Model 4
mForm4 <- as.formula("Y ~ thetaA_4/(1 + ((x/vthetaQ_4)*((1 - q_4)/q_4)) ^ thetaC_4)")
mForm4
# Model 5
mForm5 <- as.formula("Y ~ (thetaA_5 * (x ^ thetaC_5))/(vthetaQ_5 *
((1 - q_5)/q_5) + x ^ thetaC_5)")
mForm5
runApp()
runApp()
runApp()
runApp()
runApp()
