install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
require(tidyverse)
library(ggplot2)
library(tibble)
library(tidyr)
install.packages(shiny)
install.packages("shiny")
install.packages("ShinyDashboard")
install.packages("shinydashboard")
library(shinydashboard)
library(shiny)
library(shinydashboard)
library(ggplot2)
data <- mlg
library(mlg)
library(mpg)
data <- mlg
data <- mpg
rm = data
rm(data)
rm(rm)
dada <- mpg
deda <- mpg
ls(list = rm)
rm(list = ls())
dgama()
dnorm()
dnorm(-1)
shiny::runApp('Documentos/Teste')
#ggplot2
library(ggplot2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
shiny::runApp('stats-games/altura')
runApp('stats-games/altura')
setwd("~/shiny")
rm(list = ls())
setwd
setwd("~/shiny")
setwd("~/Área de Trabalho/PET/nlmSet/shiny")
setwd("~/Documentos")
setwd("~/Área de Trabalho/PET/nlmSet/shiny")
library(shiny)
library(shinydashboard)
?dashboardPage
?dashboardHeader
runApp()
?dashboardHeader
runApp()
runApp('~/nlmSet/testes')
runApp()
?dashboardBod
?dashboardBody
runApp()
runApp()
?actionLink
runApp()
?box
runApp()
?mpg
ggplot(data = ??mpg,
aes(
x =
))
?mpg
?Species
runApp()
install.packages("flexdashboard")
runApp()
?as.formula
?eval
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionLink
?skin
?dashboardPage
runApp()
mycss <- "
.irs-bar,
.irs-bar-edge,
.irs-single,
.irs-grid-pol {
background: red;
border-color: red;
}"
runApp()
shiny::runApp()
runApp('~/Área de Trabalho/PET/nlmSet')
runApp('~/Área de Trabalho/PET/nlmSet')
runApp('~/Área de Trabalho/PET/nlmSet')
runApp()
runApp('~/Área de Trabalho/PET/nlmSet')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shinyUI(dashboardPage(
# Title
title = "nlmSet",
# Skin
skin = "green",
# Header
dashboardHeader(
title = "Nonlinear Regression Models Catalogue",
titleWidth = 450
),
# Sidebar
dashboardSidebar(
# Trocando cor da barra.
tags$style(mycss),
# ***********************************************************************
# Abas
teste <- <i class="fas fa-superscript"></i>
sidebarMenu(
# Primeira Aba
menuItem(
"Models", # Titulo
tabName = "mod",
icon = "teste"
# Item dentro da aba
menuSubItem(
"Exponencial Assintotica",
tabName = "expA"
)
)
),
# ***********************************************************************
actionButton(
inputId = "link",
label = "Repository"
)
), #dashboardSidebar
# Body
dashboardBody(
# Utilizar a funcao box dentro de dashboardBody(fluidRow()) para criar caixas
fluidRow(
# Box: A funcao box cria caixas no layout da pagina.
# Status argumentos: primary, success, info, warning, danger.
box(title = "Plot",
solidHeader = TRUE, # Fixa o titulo no comeco
#height = 470,
width = 7,
status = "success",
#background = "aqua",
collapsible = TRUE,
plotOutput(
outputId = "ea",
height = 400
)
),
box(title = "Slider",
solidHeader = TRUE,
#height = 470,
width = 5,
status = "success",
collapsible = TRUE,
sliderInput(inputId = "tA",
min = -10,
max = 10,
value = 1,
step = 0.5,
label = "Theta A"
),
sliderInput(inputId = "t0",
min = 0,
max = 1,
value = 0.5,
step = 0.05,
label = "Theta 0"
)
),
box(title = "Documentation",
solidHeader = TRUE,
#height = 10,
width = 7,
status = "success",
#background = "light-blue",
collapsible = TRUE
),
box(title = "R Code",   #Inserir arquivo Rmarkdown
solidHeader = TRUE,
#height = 10,
width = 5,
status = "success",
#background = "aqua",
collapsible = TRUE
)
) #fluidRow
)#dashboardBody
)#dashboardPage
)#shinyUI
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Área de Trabalho/teste/teste2")
runApp('~/git-teste/example1')
runApp('~/git-teste/example1')
runApp('~/git-teste/example1')
runApp('~/git-teste/example1')
runApp('~/Área de Trabalho/PET/nlmSet/shiny')
shiny::runApp()
library(shiny)
library(shinydashboard)
library(ggplot2)
library(markdown)
installed.packages("shiny")
install.packages("shinydashboard")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
thetaA <- input$tA
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp('~/Área de Trabalho')
runApp()
runApp()
shiny::runApp()
